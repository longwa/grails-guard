{"name":"Grails Guard Plugin","tagline":"Provides a way to execute Grails integration tests automatically when tests or artifacts change. This is very similar to the Rails plugin of the same name and a distant cousin of Spork.","body":"Grails Guard\r\n=======================\r\nGuard provides a convenient way to run integration tests without having to suffer repetitive startup costs. Each time an\r\nintegration test suite runs, the grails environment must be compiled and bootstrapped. For a large application, especially one with many domain objects, this\r\ncan take over a minute just to run a single testcase. Over the course of several months this can lead to days of lost productivity just waiting\r\nfor tests to run. \r\n\r\nThis plugin borrows from the similarly named Rails plugin (although it is more targeted at just running tests in this incarnation).\r\n\r\nThe plugin essentially runs the tests in a loop, detecting changes to both the application code and the test code. If a change is detected, \r\nthe selected test(s) are re-run. \r\n\r\nVersions\r\n--------\r\nDue to major changes in the test framework introduced in Grails 2.3, Guard now comes in two different versions:\r\n\r\n* Version 1 - Compatible with Grails 2.0, 2.1, or 2.2\r\n* Version 2 - Compatible with Grails 2.3 or later.\r\n\r\nUsage (Version 2) \r\n-----------------      \r\nStarting with version 2, Guard is no longer implemented as a test phase. Guard is now enabled via the command line flag \"-guard\". \r\n\r\nThere are a few advantages to this approach. From an implementation standpoint, this allows Guard to fit more seamlessly into the new 2.3 test\r\nframework. It will also (eventually) allow Guard to support functional tests in addition to integration tests.\r\n\r\nTo run your tests in guard mode, you need to do a few things:\r\n\r\n1. Enable the spring reloading agent by adding the \"-reloading\" flag to the command line\r\n2. Disable forked mode execution for 'test' in BuildConfig.groovy \r\n3. Enable guard by adding the \"-guard\" flag to the command line when running integration test(s)\r\n\r\nFor example:\r\n\r\n    grails -reloading -guard test-app integration: <testpatterns...>\r\n    grails -reloading -guard test-app integration: MyService\r\n\r\nIf you want to see the console output, use:\r\n\r\n    grails -reloading -echoOut -guard test-app integration: <testpatterns...>\r\n\r\nFinally, to make life easier, just create an alias in your .bashrc:\r\n\r\n    alias guard='grails -reloading -echoOut -guard test-app integration:'\r\n\r\nThen run:\r\n\r\n    guard my.package.*\r\n    guard MyService\r\n    guard MyService MyOtherService\r\n\r\nThis will run the tests once as it normally would. Regardless of the success or failure of the tests, it will then enter \r\na mode where it detects changes to application code and test code.  When a change is detected, it will indicate which file was changed\r\nand then run the same test pattern again with the updates.\r\n\r\nUsage (Version 1)\r\n-----------------\r\nFor version 1, Guard is still implemented as a test phase replacement for \"integration:\".\r\n\r\nTo run your tests in guard mode, you need to do a few things:\r\n\r\n1. Enable the spring reloading agent by adding the \"-reloading\" flag to the command line\r\n2. Enable guard by specifying the \"guard:\" test phase after 'test-app'\r\n\r\nFor example:\r\n\r\n    grails -reloading test-app guard: <testpatterns...>\r\n    grails -reloading test-app guard: MyService\r\n\r\nFinally, to make life easier, just create an alias in your .bashrc:\r\n\r\n    alias guard='grails -reloading -echoOut test-app guard:'\r\n\r\nThen run:\r\n\r\n    guard my.package.*\r\n    guard MyService\r\n    guard MyService MyOtherService\r\n\r\nIDE Support\r\n-----------\r\nIntelliJ (and possibly Eclipse though I haven't tried it) can also be used to run guard mode.\r\n\r\nIn IntelliJ, run an integration test once normally. This will give you a \"configuration\" for the test case which can be edited.\r\nClick to edit the profile and add the -guard flag. You may also need to add the \"-reloading\" flag to the end of the command line.\r\n\r\nWhen you run that configuration, IntelliJ will process the tests normally and then \"spin\" as if it's waiting for more tests. As you modify files,\r\nyou will see the same tests run again. Since guard never notifies the listeners that the test run is complete, IntelliJ will continue waiting for\r\ntests until you stop it manually.\r\n\r\nKnown Issues\r\n------------\r\n* Since the environment is not reloaded, tests must be careful to cleanup after themselves, even if running against the in-memory database since the create-drop\r\nonly happens when the environment is bootstrapped.\r\n* Depending on the classes being changed, you may encounter PermGem issues if Guard loops for an extending number of iterations.\r\n* If you have a large domain model, it can be very beneficial to disable Hibernate sessionFactory reloading by setting the hibernate.reload = false flag in DataSource.groovy\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}